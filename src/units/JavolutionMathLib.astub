import units.qual.*;

package javolution.lang;

final class MathLib {
	// Scalar Constants
    static final @Dimensionless double E;
    static final @Dimensionless double PI;
    static final @UnitsBottom double NaN;

    // Methods ========

    // Absolute Val
    static @PolyUnit double abs(@PolyUnit double a);
    static @PolyUnit float abs(@PolyUnit float a);
    static @PolyUnit int abs(@PolyUnit int a);
    static @PolyUnit long abs(@PolyUnit long a);

    // Inverse Trigonometry
    static @rad double asin(@Dimensionless double a);
    static @rad double acos(@Dimensionless double a);
    static @rad double atan(@Dimensionless double a);
    static @rad double atan2(@UnknownUnits double y, @UnknownUnits double x);

    // Trigonometry
    static @Dimensionless double sin(@rad double a);
    static @Dimensionless double cos(@rad double a);
    static @Dimensionless double tan(@rad double a);
    
    // Hyperbolic Trigonometry
    // takes as input a hyperbolic angle which is also in radians for Math lib
    // implementation
    static @Dimensionless double sinh(@rad double x);
    static @Dimensionless double cosh(@rad double x);
    static @Dimensionless double tanh(@rad double x);

    // Angle Conversion
    static @deg double toDegrees(@rad double angrad);
    static @rad double toRadians(@deg double angdeg);

    // Units Checker code has special support for these 2 methods, which will
    // return the square root and cubic root of any supported units eg m2, km3
    // if the user wants to take the square root of just the magnitude without
    // affecting the unit, then they can surpress the warning
    // TODO: special support in inference
    static @UnitsBottom double sqrt(@UnknownUnits double a);
    static @UnitsBottom double cbrt(@UnknownUnits double a);

    static @PolyUnit double ceil(@PolyUnit double a);
    static @PolyUnit double floor(@PolyUnit double a);

    // powers, exponents, and logarithms
    // returns the value of a ^ b, for specific cases of a having the units of
    // m, mm, and km we return m2, mm2, and km2, for everything else we return
    // UnknownUnits
    // TODO: special support in inference
    static @UnitsBottom double pow(@UnknownUnits double a, @UnknownUnits double b);

    // calculates e^a == e * e * e .... which is a unitless scalar
    static double exp(@UnknownUnits double a);

    // log[a] = y where e^y = a, unitless?, this is log with base e
    static double log(@UnknownUnits double a);
    // log with base 10, log10[x] = y where 10^y = x
    static double log10(@UnknownUnits double a);

    // Future TODO: support retainment of units in these identifies
    // identity: exp(log(a)) == a
    // identity: log(exp(x)) == x

    // min and max
    // both x & y should be the same unit, if so returns that unit, otherwise
    // returns the LUB of the 2 units
    static @PolyUnit double max(@PolyUnit double a, @PolyUnit double b);
    static @PolyUnit float max(@PolyUnit float a, @PolyUnit float b);
    static @PolyUnit int max(@PolyUnit int a, @PolyUnit int b);
    static @PolyUnit long max(@PolyUnit long a, @PolyUnit long b);

    // both x & y should be the same unit, if so returns that unit, otherwise
    // returns the LUB of the 2 units
    static @PolyUnit double min(@PolyUnit double a, @PolyUnit double b);
    static @PolyUnit float min(@PolyUnit float a, @PolyUnit float b);
    static @PolyUnit int min(@PolyUnit int a, @PolyUnit int b);
    static @PolyUnit long min(@PolyUnit long a, @PolyUnit long b);

    // same unit as a
    static @PolyUnit long round(@PolyUnit double a);
    static @PolyUnit int round(@PolyUnit float a);
}