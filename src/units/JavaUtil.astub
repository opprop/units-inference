import units.qual.*;

package java.util;

class Objects {
    // TODO: enforce comparable constraint
    static boolean equals(@UnknownUnits Object arg0, @UnknownUnits Object arg1);
    // TODO: enforce comparable constraint
    static boolean deepEquals(@UnknownUnits Object arg0, @UnknownUnits Object arg1);
    static int hashCode(@UnknownUnits Object arg0);
    static int hash(@UnknownUnits Object[] arg0);
    static String toString(@UnknownUnits Object arg0);
    static String toString(@UnknownUnits Object arg0, String arg1);
    static <T extends @UnknownUnits Object> int compare(T arg0, T arg1, Comparator<? super @UnitsBottom T> arg2);
    static <T extends @UnknownUnits Object> T requireNonNull(T arg0);
    static <T extends @UnknownUnits Object> T requireNonNull(T arg0, String arg1);
    static boolean isNull(@UnknownUnits Object arg0);
    static boolean nonNull(@UnknownUnits Object arg0);
    static <T extends @UnknownUnits Object> T requireNonNull(T arg0, Supplier<String> arg1);
}

class Random implements Serializable {
    Random(@UnknownUnits long arg0);
    void setSeed(@UnknownUnits long arg0);
}

class Arrays {
    static void fill(@UnknownUnits int[] a, @UnknownUnits int val);
    static void fill(@UnknownUnits short[] a, @UnknownUnits short val);
    static void fill(@UnknownUnits long[] a, @UnknownUnits long val);
    static void fill(@UnknownUnits float[] a, @UnknownUnits float val);
    static void fill(@UnknownUnits double[] a, @UnknownUnits double val);
    static String deepToString(@UnknownUnits Object[] a);
}

